package com.alessio.luca.a321do;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Environment;
import android.util.Log;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;

/** this class contains methods that don't really belong to a specific class but are useful across various situations
 * Created by Luca on 30/10/2016.
 */

public class Utilities {
    public static final String LIST_SEPARATOR = "__,__";
    public static final String EDIT_NOTE_PAYLOAD_CODE = "EditNotePayload";
    public static final String NOTIFICATION_PAYLOAD_CODE = "NotificationNotePayload";
    public static final String FILE_NAME = "321DO Your Notes.pdf";

    public static void openKeyboard(Context context) {
        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY);
    }
    public static void closeKeyboard(Context context, EditText editText) {
        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(editText.getWindowToken(), 0);
    }
    public static String checkListToString(List<String> stringList) {
        if (stringList==null || stringList.isEmpty()) {
            return new String();
        }
        String toString = new String();
        for(int i=0; i<stringList.size(); i++)
        {
            toString = toString + stringList.get(i);
            if(i!=stringList.size()-1)
                toString = toString + LIST_SEPARATOR;
        }
        return toString;
    }
    public static List<String> stringToCheckList(String str) {
        if(str != null)
            return new ArrayList<String>(Arrays.asList(str.split(LIST_SEPARATOR))); //forse restituisce oggetto non modificabile
        else
            return new ArrayList<String>();
    }
    public static Bitmap resizeImage(Bitmap srcBitmap, float percentage) {
        int srcWidth = srcBitmap.getWidth();
        int srcHeight = srcBitmap.getHeight();
        int dstWidth = (int)(srcWidth*percentage);
        int dstHeight = (int)(srcHeight*percentage);
        return Bitmap.createScaledBitmap(srcBitmap, dstWidth, dstHeight, true);
    }
    public static void notesToPDF(Note[] notes, SortingOrder sortingOrder){
        //TODO
        Document doc = new Document();

        try {
            String path = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Dir";

            File dir = new File(path);
            if(!dir.exists())
                dir.mkdirs();

            File file = new File(dir, FILE_NAME);
            FileOutputStream fOut = new FileOutputStream(file);

            PdfWriter.getInstance(doc, fOut);

            //open the document
            doc.open();

            Paragraph pTitle = new Paragraph("321DO Your Notes");
            pTitle.setAlignment(Paragraph.ALIGN_CENTER);
            pTitle.setFont(new Font(Font.FontFamily.HELVETICA));

            Paragraph pGeneratedBlaBla = new Paragraph("This document was generated by the 321DO! Android App on "
                                                        +Calendar.getInstance().getTime().toString()+"\n"
                                                        +"Filter applied:   "+sortingOrder.getFilter().name()
                                                        +"  Notes ordered by:   "+sortingOrder.getOrder().name()
                                                        +"  Search parameter:   "+sortingOrder.getSearchParameter());

            //add paragraph to document
            doc.add(pTitle);
            doc.add(pGeneratedBlaBla);
            Log.d("321pdf","son qua");

            com.itextpdf.text.List printedNotes = new com.itextpdf.text.List(com.itextpdf.text.List.ORDERED);

            for (Note note : notes)
            {
                Paragraph pNote = new Paragraph(note.getTitle()
                                            + "\n(" + note.printTime() + ")\n"
                                            + note.getImportance().toString() + "  "
                                            + note.getTag() + "\n"
                                            + note.getDescription() + "\n");
                if(!note.getCheckList().isEmpty())
                {
                    Paragraph pcl = new Paragraph("Sub Activities");
                    com.itextpdf.text.List list = new com.itextpdf.text.List(com.itextpdf.text.List.ALPHABETICAL);
                    for(int i=0; i<note.getCheckList().size(); i++)
                        list.add(note.getCheckList().get(i));
                    pcl.add(list);
                    pNote.add(pcl);
                }
                if (note.getImgBytes()!=null)
                {
                    pNote.add(new Paragraph("Image Attachment"));
                    Bitmap bitmap = BitmapFactory.decodeByteArray(note.getImgBytes(), 0, note.getImgBytes().length);
                    bitmap = resizeImage(bitmap, 0.2f);
                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                    bitmap.compress(Bitmap.CompressFormat.JPEG, 70, stream);
                    Image image = Image.getInstance(stream.toByteArray());
                    pNote.add(image);
                }
                printedNotes.add(new ListItem(pNote));
            }

            doc.add(printedNotes);
        } catch (DocumentException de) {
            Log.e("PDFCreator", "DocumentException:" + de);
        } catch (IOException e) {
            Log.e("PDFCreator", "ioException:" + e);
        }
        finally {
            doc.close();
        }
    }
}
